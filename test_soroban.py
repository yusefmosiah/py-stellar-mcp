"""
Soroban integration tests
Tests against public test contracts on Stellar testnet
Generates detailed markdown report of results
"""

import asyncio
import os
from datetime import datetime
from stellar_sdk.soroban_server_async import SorobanServerAsync
from stellar_sdk import Network
from stellar_soroban import soroban_operations
from key_manager import KeyManager

# Test configuration
SOROBAN_RPC_URL = "https://soroban-testnet.stellar.org"

# Report data structure
report = {
    "timestamp": datetime.now().isoformat(),
    "test_name": "Soroban Integration Tests",
    "results": [],
    "accounts": {},
    "summary": {"passed": 0, "failed": 0, "total": 0}
}

def add_test_result(test_name, passed, details, error=None):
    """Add a test result to the report"""
    report["results"].append({
        "test": test_name,
        "status": "‚úÖ PASSED" if passed else "‚ùå FAILED",
        "details": details,
        "error": error
    })
    if passed:
        report["summary"]["passed"] += 1
    else:
        report["summary"]["failed"] += 1
    report["summary"]["total"] += 1

    # Print to console
    status = "‚úÖ" if passed else "‚ùå"
    print(f"   {status} {details}")
    if error:
        print(f"   Error: {error}")

def generate_markdown_report():
    """Generate markdown report file"""
    timestamp_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_reports/soroban_integration_report_{timestamp_str}.md"

    # Ensure directory exists
    os.makedirs("test_reports", exist_ok=True)

    md = []
    md.append("# Soroban Integration Test Report")
    md.append(f"\n**Test Run:** {report['timestamp']}")
    md.append(f"\n**Network:** Stellar Testnet")
    md.append(f"\n**Soroban RPC:** {SOROBAN_RPC_URL}")
    md.append(f"\n**Version:** v2.0 with Soroban Support")
    md.append("\n---\n")

    # Summary
    md.append("## Summary\n")
    md.append(f"- **Total Tests:** {report['summary']['total']}")
    md.append(f"- **Passed:** {report['summary']['passed']} ‚úÖ")
    md.append(f"- **Failed:** {report['summary']['failed']} ‚ùå")
    success_rate = (report['summary']['passed'] / report['summary']['total'] * 100) if report['summary']['total'] > 0 else 0
    md.append(f"- **Success Rate:** {success_rate:.1f}%")
    md.append("\n---\n")

    # Soroban Features
    md.append("## Soroban Features Tested\n")
    md.append("- **Server Health:** Connection and status checks")
    md.append("- **Simulate Action:** Read-only contract invocation (no fees)")
    md.append("- **Parameter Parsing:** JSON format with explicit type tags")
    md.append("- **Error Handling:** Invalid action detection")
    md.append("\n---\n")

    # Test Accounts
    if report["accounts"]:
        md.append("## Test Accounts\n")
        for name, account_id in report["accounts"].items():
            md.append(f"### {name}")
            md.append(f"- **Account ID:** `{account_id}`")
            md.append(f"- **Explorer:** [View on Stellar Expert](https://stellar.expert/explorer/testnet/account/{account_id})")
            md.append("")
        md.append("---\n")

    # Test Results
    md.append("## Test Results\n")
    for i, result in enumerate(report["results"], 1):
        md.append(f"### Test {i}: {result['test']}")
        md.append(f"\n**Status:** {result['status']}\n")
        if result["details"]:
            md.append(f"**Details:** {result['details']}\n")
        if result["error"]:
            md.append(f"**Error:**")
            md.append(f"```")
            md.append(f"{result['error']}")
            md.append(f"```\n")
        md.append("")

    md.append("---\n")
    md.append("\n## Notes\n")
    md.append("- ‚ö†Ô∏è  **invoke action** requires funded account (not tested in basic suite)")
    md.append("- ‚ö†Ô∏è  **get_data action** requires known contract storage keys")
    md.append("- ‚ö†Ô∏è  **get_events action** requires known contract with events")
    md.append("\n")
    md.append("---\n")
    md.append(f"\n*Report generated by Stellar MCP Server v2 test suite*")

    # Write file
    with open(filename, "w") as f:
        f.write("\n".join(md))

    return filename


async def test_soroban_integration():
    """Test against Stellar testnet Soroban RPC"""

    # Note: Contract invocation tests are skipped because we don't have a
    # verified live contract with known functions on testnet.
    # To test with a real contract, deploy one and update CONTRACT_ID.
    CONTRACT_ID = None  # Set to a valid contract ID if available

    soroban = SorobanServerAsync(SOROBAN_RPC_URL)
    keys = KeyManager()

    print("üß™ Testing Soroban operations...")
    print()

    # Create test account
    from stellar_sdk import Keypair
    import requests
    kp = Keypair.random()
    keys.store(kp.public_key, kp.secret)

    report["accounts"]["Test Account"] = kp.public_key
    print(f"üìù Test account created: {kp.public_key}")
    print()

    # Fund the test account (required even for simulations)
    print("üí∞ Funding test account...")
    import time
    try:
        friendbot_url = f"https://friendbot.stellar.org?addr={kp.public_key}"
        response = requests.get(friendbot_url)
        if response.status_code == 200:
            print(f"   ‚úÖ Account funded successfully")
            # Wait for ledger to close
            time.sleep(5)
            print(f"   ‚è≥ Waiting for ledger confirmation...")
        else:
            print(f"   ‚ö†Ô∏è  Friendbot returned status {response.status_code}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Failed to fund account: {e}")
        print(f"   (Simulations may fail)")
    print()

    # Test 1: Check server health
    print("1. Testing server connection...")
    server_ok = False
    try:
        health = await soroban.get_health()
        add_test_result("Server connection", True, f"Server health: {health.status}")
        server_ok = True
    except Exception as e:
        add_test_result("Server connection", False, "Server connection failed", str(e))
    print()

    # Only run remaining tests if server connection succeeded
    if server_ok:
        # Test 2 & 3: Contract interaction tests (skipped if no contract available)
        if CONTRACT_ID:
            # Test 2: Simulate (read-only, but requires funded account for sequence number)
            print("2. Testing simulate action...")
            try:
                result = await soroban_operations(
                    action="simulate",
                    soroban_server=soroban,
                    key_manager=keys,
                    contract_id=CONTRACT_ID,
                    function_name="last_price",
                    parameters='[]',
                    source_account=kp.public_key,
                    network_passphrase=Network.TESTNET_NETWORK_PASSPHRASE
                )
                if result.get("success"):
                    details = f"Simulation successful - Result: {result.get('result')}, CPU: {result.get('cost', {}).get('cpu_instructions')}, Ledger: {result.get('latest_ledger')}"
                    add_test_result("Simulate action", True, details)
                else:
                    add_test_result("Simulate action", False, "Simulation failed", result.get('error'))
            except Exception as e:
                add_test_result("Simulate action", False, "Exception during simulation", str(e))
            print()

            # Test 3: Parameter parsing test
            print("3. Testing parameter parsing...")
            try:
                result = await soroban_operations(
                    action="simulate",
                    soroban_server=soroban,
                    key_manager=keys,
                    contract_id=CONTRACT_ID,
                    function_name="base",
                    parameters='[{"type": "symbol", "value": "USD"}]',
                    source_account=kp.public_key,
                    network_passphrase=Network.TESTNET_NETWORK_PASSPHRASE
                )
                if result.get("success"):
                    add_test_result("Parameter parsing", True, "Parameter parsing works with symbol type")
                else:
                    add_test_result("Parameter parsing", False, "Parameter test failed", result.get('error'))
            except Exception as e:
                add_test_result("Parameter parsing", False, "Exception during parameter parsing", str(e))
            print()
        else:
            print("‚ö†Ô∏è  Skipping tests 2 & 3: No live contract available")
            print("   (To test contract interactions, deploy a contract and set CONTRACT_ID)")
            print()

        # Test 2: Invalid action test (tests error handling)
        print("2. Testing error handling...")
        try:
            result = await soroban_operations(
                action="invalid_action",
                soroban_server=soroban,
                key_manager=keys,
                network_passphrase=Network.TESTNET_NETWORK_PASSPHRASE
            )
            if "error" in result and "Unknown action" in result["error"]:
                add_test_result("Error handling", True, f"Error handling works correctly - Valid actions: {result.get('valid_actions')}")
            else:
                add_test_result("Error handling", False, "Unexpected response", str(result))
        except Exception as e:
            add_test_result("Error handling", False, "Exception during error handling test", str(e))
        print()
    else:
        print("‚ö†Ô∏è  Skipping remaining tests due to server connection failure")
        print()

    await soroban.close()
    print("=" * 70)
    print("TEST SUITE COMPLETE")
    print("=" * 70)
    print()
    print(f"Results: {report['summary']['passed']}/{report['summary']['total']} tests passed")
    print()

    # Generate markdown report
    print("Generating markdown report...")
    report_file = generate_markdown_report()
    print(f"‚úÖ Report saved to: {report_file}")
    print()

    # Print account link
    print("Test Account:")
    print(f"  {kp.public_key}")
    print(f"  https://stellar.expert/explorer/testnet/account/{kp.public_key}")
    print()


if __name__ == "__main__":
    print()
    print("=" * 70)
    print("Stellar Soroban Integration Tests")
    print("=" * 70)
    print()

    asyncio.run(test_soroban_integration())
