"""
Basic integration tests for Stellar MCP Server v2 (Composite Tools)
Tests account creation, funding, and basic operations using v2 tools
Generates markdown report
"""

from datetime import datetime
from stellar_sdk import Server
from key_manager import KeyManager
from stellar_tools_v2 import (
    account_manager,
    trustline_manager,
    utilities
)

# Test configuration
HORIZON_URL = "https://horizon-testnet.stellar.org"
USDC_ISSUER = "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5"

# Initialize
horizon = Server(HORIZON_URL)
keys = KeyManager()

# Report data structure
report = {
    "timestamp": datetime.now().isoformat(),
    "test_name": "Basic Integration Tests (v2 Composite Tools)",
    "results": [],
    "accounts": {},
    "summary": {"passed": 0, "failed": 0, "total": 0}
}

def add_test_result(test_name, passed, details, error=None):
    """Add a test result to the report"""
    report["results"].append({
        "test": test_name,
        "status": "✅ PASSED" if passed else "❌ FAILED",
        "details": details,
        "error": error
    })
    if passed:
        report["summary"]["passed"] += 1
    else:
        report["summary"]["failed"] += 1
    report["summary"]["total"] += 1

    # Print to console
    status = "✅ PASSED" if passed else "❌ FAILED"
    print(f"{status}: {test_name}")
    if details:
        print(f"   {details}")
    if error:
        print(f"   Error: {error}")
    print()

def generate_markdown_report():
    """Generate markdown report file"""
    timestamp_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_reports/basic_v2_report_{timestamp_str}.md"

    # Ensure directory exists
    import os
    os.makedirs("test_reports", exist_ok=True)

    md = []
    md.append("# Basic Integration Test Report (v2 Composite Tools)")
    md.append(f"\n**Test Run:** {report['timestamp']}")
    md.append(f"\n**Network:** Stellar Testnet")
    md.append(f"\n**Horizon:** {HORIZON_URL}")
    md.append(f"\n**Tools Version:** v2 (5 Composite Tools)")
    md.append("\n---\n")

    # Summary
    md.append("## Summary\n")
    md.append(f"- **Total Tests:** {report['summary']['total']}")
    md.append(f"- **Passed:** {report['summary']['passed']} ✅")
    md.append(f"- **Failed:** {report['summary']['failed']} ❌")
    success_rate = (report['summary']['passed'] / report['summary']['total'] * 100) if report['summary']['total'] > 0 else 0
    md.append(f"- **Success Rate:** {success_rate:.1f}%")
    md.append("\n---\n")

    # Test Accounts
    if report["accounts"]:
        md.append("## Test Accounts\n")
        for name, account_id in report["accounts"].items():
            md.append(f"### {name}")
            md.append(f"- **Account ID:** `{account_id}`")
            md.append(f"- **Explorer:** [View on Stellar Expert](https://stellar.expert/explorer/testnet/account/{account_id})")
            md.append("")
        md.append("---\n")

    # Test Results
    md.append("## Test Results\n")
    for i, result in enumerate(report["results"], 1):
        md.append(f"### Test {i}: {result['test']}")
        md.append(f"\n**Status:** {result['status']}\n")
        if result["details"]:
            md.append(f"**Details:** {result['details']}\n")
        if result["error"]:
            md.append(f"**Error:**")
            md.append(f"```")
            md.append(f"{result['error']}")
            md.append(f"```\n")
        md.append("")

    md.append("---\n")
    md.append(f"\n*Report generated by Stellar MCP Server v2 test suite*")

    # Write file
    with open(filename, "w") as f:
        f.write("\n".join(md))

    return filename

print("=" * 70)
print("STELLAR MCP SERVER v2 - BASIC INTEGRATION TESTS")
print("=" * 70)
print()

# Test 1: Server Status
print("Test 1: Checking Horizon server status...")
try:
    status = utilities(action="status", horizon=horizon)
    if "error" in status:
        add_test_result("Server Status", False, None, status["error"])
        exit(1)
    else:
        add_test_result("Server Status", True, f"Horizon version {status.get('horizon_version')}, Latest ledger: {status.get('history_latest_ledger')}")
except Exception as e:
    add_test_result("Server Status", False, None, str(e))
    exit(1)

# Test 2: Create Account
print("Test 2: Creating new account...")
try:
    result = account_manager(action="create", key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Create Account", False, None, result["error"])
        exit(1)

    account_id = result["account_id"]
    report["accounts"]["Test Account"] = account_id
    add_test_result("Create Account", True, f"Account ID: {account_id}")
except Exception as e:
    add_test_result("Create Account", False, None, str(e))
    exit(1)

# Test 3: List Accounts
print("Test 3: Listing managed accounts...")
try:
    accounts = account_manager(action="list", key_manager=keys, horizon=horizon)
    if "error" in accounts:
        add_test_result("List Accounts", False, None, accounts["error"])
        exit(1)
    else:
        add_test_result("List Accounts", True, f"{accounts['count']} account(s) found")
except Exception as e:
    add_test_result("List Accounts", False, None, str(e))
    exit(1)

# Test 4: Fund Account
print("Test 4: Funding account via Friendbot...")
print("   (This may take a few seconds...)")
try:
    result = account_manager(action="fund", account_id=account_id, key_manager=keys, horizon=horizon)
    if not result.get("success"):
        add_test_result("Fund Account", False, None, result.get("error"))
        exit(1)
    add_test_result("Fund Account", True, f"Balance: {result['balance']} XLM")
except Exception as e:
    add_test_result("Fund Account", False, None, str(e))
    exit(1)

# Test 5: Get Account Details
print("Test 5: Fetching account details...")
try:
    account = account_manager(action="get", account_id=account_id, key_manager=keys, horizon=horizon)
    if "error" in account:
        add_test_result("Get Account", False, None, account["error"])
        exit(1)
    else:
        xlm_balance = None
        for balance in account['balances']:
            if balance['asset_type'] == 'native':
                xlm_balance = balance['balance']
        add_test_result("Get Account", True, f"Sequence: {account['sequence']}, XLM Balance: {xlm_balance}")
except Exception as e:
    add_test_result("Get Account", False, None, str(e))
    exit(1)

# Test 6: Establish Trustline
print("Test 6: Establishing trustline for USDC...")
try:
    result = trustline_manager(
        action="establish",
        account_id=account_id,
        asset_code="USDC",
        asset_issuer=USDC_ISSUER,
        key_manager=keys,
        horizon=horizon
    )
    if not result.get("success"):
        add_test_result("Establish Trustline", False, None, result.get("error"))
        exit(1)
    add_test_result("Establish Trustline", True, f"Hash: {result['hash'][:16]}..., Ledger: {result['ledger']}")
except Exception as e:
    add_test_result("Establish Trustline", False, None, str(e))
    exit(1)

# Test 7: Verify Trustline
print("Test 7: Verifying trustline in account...")
try:
    account = account_manager(action="get", account_id=account_id, key_manager=keys, horizon=horizon)
    usdc_balance = None
    for balance in account['balances']:
        if balance.get('asset_code') == 'USDC':
            usdc_balance = balance
            break

    if usdc_balance:
        add_test_result("Verify Trustline", True, f"USDC Balance: {usdc_balance['balance']}, Limit: {usdc_balance['limit']}")
    else:
        add_test_result("Verify Trustline", False, None, "USDC trustline not found in account balances")
except Exception as e:
    add_test_result("Verify Trustline", False, None, str(e))

# Test 8: Get Transaction History
print("Test 8: Fetching transaction history...")
try:
    result = account_manager(action="transactions", account_id=account_id, key_manager=keys, horizon=horizon, limit=5)
    if "error" in result:
        add_test_result("Get Transactions", False, None, result["error"])
    else:
        tx_count = len(result.get("transactions", []))
        add_test_result("Get Transactions", True, f"Found {tx_count} transaction(s)")
except Exception as e:
    add_test_result("Get Transactions", False, None, str(e))

# Test 9: Export Keypair
print("Test 9: Exporting keypair...")
try:
    result = account_manager(action="export", account_id=account_id, key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Export Keypair", False, None, result["error"])
    else:
        secret = result.get("secret_key", "")
        is_valid = secret.startswith("S") and len(secret) > 50
        if is_valid:
            add_test_result("Export Keypair", True, f"Secret key exported (starts with 'S', length: {len(secret)})")
        else:
            add_test_result("Export Keypair", False, None, "Invalid secret key format")
except Exception as e:
    add_test_result("Export Keypair", False, None, str(e))

print("=" * 70)
print("TEST SUITE COMPLETE")
print("=" * 70)
print()
print(f"Results: {report['summary']['passed']}/{report['summary']['total']} tests passed")
print()

# Generate markdown report
print("Generating markdown report...")
report_file = generate_markdown_report()
print(f"✅ Report saved to: {report_file}")
print()

# Print account links
print("Test Account:")
print(f"  {account_id}")
print(f"  Explorer: https://stellar.expert/explorer/testnet/account/{account_id}")
print()

# Exit with appropriate code
exit(0 if report['summary']['failed'] == 0 else 1)
