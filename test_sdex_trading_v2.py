"""
SDEX Trading Integration Tests for Stellar MCP Server v2 (Composite Tools)
Tests orderbook queries, order placement, and order management using v2 composite tools
Showcases the 1-call market order feature (was 3 calls in v1)
Generates detailed markdown report of results
"""

from datetime import datetime
from stellar_sdk import Server
from key_manager import KeyManager
from stellar_tools_v2 import (
    account_manager,
    trading,
    trustline_manager,
    market_data,
    utilities
)

# Test configuration
HORIZON_URL = "https://horizon-testnet.stellar.org"
USDC_ISSUER = "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5"

# Initialize
horizon = Server(HORIZON_URL)
keys = KeyManager()

# Report data structure
report = {
    "timestamp": datetime.now().isoformat(),
    "test_name": "SDEX Trading Integration Tests (v2 Composite Tools)",
    "results": [],
    "accounts": {},
    "summary": {"passed": 0, "failed": 0, "total": 0}
}

def add_test_result(test_name, passed, details, error=None):
    """Add a test result to the report"""
    report["results"].append({
        "test": test_name,
        "status": "✅ PASSED" if passed else "❌ FAILED",
        "details": details,
        "error": error
    })
    if passed:
        report["summary"]["passed"] += 1
    else:
        report["summary"]["failed"] += 1
    report["summary"]["total"] += 1

    # Print to console
    status = "✅ PASSED" if passed else "❌ FAILED"
    print(f"{status}: {test_name}")
    if details:
        print(f"   {details}")
    if error:
        print(f"   Error: {error}")
    print()

def generate_markdown_report():
    """Generate markdown report file"""
    timestamp_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"test_reports/sdex_trading_v2_report_{timestamp_str}.md"

    # Ensure directory exists
    import os
    os.makedirs("test_reports", exist_ok=True)

    md = []
    md.append("# SDEX Trading Integration Test Report (v2 Composite Tools)")
    md.append(f"\n**Test Run:** {report['timestamp']}")
    md.append(f"\n**Network:** Stellar Testnet")
    md.append(f"\n**Horizon:** {HORIZON_URL}")
    md.append(f"\n**Tools Version:** v2 (5 Composite Tools - 70% fewer tools, 70% token savings)")
    md.append("\n---\n")

    # Summary
    md.append("## Summary\n")
    md.append(f"- **Total Tests:** {report['summary']['total']}")
    md.append(f"- **Passed:** {report['summary']['passed']} ✅")
    md.append(f"- **Failed:** {report['summary']['failed']} ❌")
    success_rate = (report['summary']['passed'] / report['summary']['total'] * 100) if report['summary']['total'] > 0 else 0
    md.append(f"- **Success Rate:** {success_rate:.1f}%")
    md.append("\n---\n")

    # Key Improvements
    md.append("## v2 Improvements\n")
    md.append("- **Market Buy:** 1 composite call (was 3 calls in v1: build → sign → submit)")
    md.append("- **Market Sell:** 1 composite call (was 3 calls in v1)")
    md.append("- **Limit Orders:** 1 composite call (was 3 calls in v1)")
    md.append("- **Auto-signing:** Built-in, reduces workflow complexity")
    md.append("- **Smart defaults:** `base_asset='XLM'`, `auto_sign=True`, market prices auto-set")
    md.append("\n---\n")

    # Test Accounts
    if report["accounts"]:
        md.append("## Test Accounts\n")
        for name, account_id in report["accounts"].items():
            md.append(f"### {name}")
            md.append(f"- **Account ID:** `{account_id}`")
            md.append(f"- **Explorer:** [View on Stellar Expert](https://stellar.expert/explorer/testnet/account/{account_id})")
            md.append("")
        md.append("---\n")

    # Test Results
    md.append("## Test Results\n")
    for i, result in enumerate(report["results"], 1):
        md.append(f"### Test {i}: {result['test']}")
        md.append(f"\n**Status:** {result['status']}\n")
        if result["details"]:
            md.append(f"**Details:** {result['details']}\n")
        if result["error"]:
            md.append(f"**Error:**")
            md.append(f"```")
            md.append(f"{result['error']}")
            md.append(f"```\n")
        md.append("")

    # Trade execution summary
    if report.get("real_trade_executed"):
        md.append("---\n")
        md.append("## 🎉 Real Market Trade Executed!\n")
        md.append(f"- **USDC Acquired:** {report.get('usdc_acquired', 'N/A')}")
        md.append(f"- **Trade Price:** {report.get('trade_price', 'N/A')} XLM/USDC")
        md.append(f"- **Execution Method:** v2 single `trading_tool(action='market_buy')` call")
        md.append("\n")

    md.append("---\n")
    md.append(f"\n*Report generated by Stellar MCP Server v2 test suite*")

    # Write file
    with open(filename, "w") as f:
        f.write("\n".join(md))

    return filename

print("=" * 70)
print("STELLAR MCP SERVER v2 - SDEX TRADING INTEGRATION TESTS")
print("=" * 70)
print()

# Test 1: Create Account A (Buyer)
print("Test 1: Creating Account A (Buyer)...")
try:
    result = account_manager(action="create", key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Create Account A", False, None, result["error"])
        exit(1)

    account_a = result["account_id"]
    report["accounts"]["Account A (Buyer)"] = account_a
    add_test_result("Create Account A", True, f"Account ID: {account_a}")
except Exception as e:
    add_test_result("Create Account A", False, None, str(e))
    exit(1)

# Test 2: Create Account B (Seller)
print("Test 2: Creating Account B (Seller)...")
try:
    result = account_manager(action="create", key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Create Account B", False, None, result["error"])
        exit(1)

    account_b = result["account_id"]
    report["accounts"]["Account B (Seller)"] = account_b
    add_test_result("Create Account B", True, f"Account ID: {account_b}")
except Exception as e:
    add_test_result("Create Account B", False, None, str(e))
    exit(1)

# Test 3: Fund Account A
print("Test 3: Funding Account A...")
print("   (This may take a few seconds...)")
try:
    result = account_manager(action="fund", account_id=account_a, key_manager=keys, horizon=horizon)
    if not result.get("success"):
        add_test_result("Fund Account A", False, None, result.get("error"))
        exit(1)
    add_test_result("Fund Account A", True, f"Balance: {result['balance']} XLM")
except Exception as e:
    add_test_result("Fund Account A", False, None, str(e))
    exit(1)

# Test 4: Fund Account B
print("Test 4: Funding Account B...")
print("   (This may take a few seconds...)")
try:
    result = account_manager(action="fund", account_id=account_b, key_manager=keys, horizon=horizon)
    if not result.get("success"):
        add_test_result("Fund Account B", False, None, result.get("error"))
        exit(1)
    add_test_result("Fund Account B", True, f"Balance: {result['balance']} XLM")
except Exception as e:
    add_test_result("Fund Account B", False, None, str(e))
    exit(1)

# Test 5: Establish USDC trustline on Account A
print("Test 5: Establishing USDC trustline on Account A...")
try:
    result = trustline_manager(
        action="establish",
        account_id=account_a,
        asset_code="USDC",
        asset_issuer=USDC_ISSUER,
        key_manager=keys,
        horizon=horizon
    )
    if not result.get("success"):
        add_test_result("Establish Trustline A", False, None, result.get("error"))
        exit(1)
    add_test_result("Establish Trustline A", True, f"Hash: {result['hash'][:16]}..., Ledger: {result['ledger']}")
except Exception as e:
    add_test_result("Establish Trustline A", False, None, str(e))
    exit(1)

# Test 6: Establish USDC trustline on Account B
print("Test 6: Establishing USDC trustline on Account B...")
try:
    result = trustline_manager(
        action="establish",
        account_id=account_b,
        asset_code="USDC",
        asset_issuer=USDC_ISSUER,
        key_manager=keys,
        horizon=horizon
    )
    if not result.get("success"):
        add_test_result("Establish Trustline B", False, None, result.get("error"))
        exit(1)
    add_test_result("Establish Trustline B", True, f"Hash: {result['hash'][:16]}..., Ledger: {result['ledger']}")
except Exception as e:
    add_test_result("Establish Trustline B", False, None, str(e))
    exit(1)

# Test 7: Query USDC/XLM Orderbook
print("Test 7: Querying USDC/XLM orderbook...")
try:
    result = market_data(
        action="orderbook",
        horizon=horizon,
        base_asset="XLM",
        quote_asset="USDC",
        quote_issuer=USDC_ISSUER,
        limit=10
    )
    if "error" in result:
        add_test_result("Query Orderbook", False, None, result["error"])
    else:
        bid_count = len(result.get("bids", []))
        ask_count = len(result.get("asks", []))
        add_test_result("Query Orderbook", True, f"Bids: {bid_count}, Asks: {ask_count}")
except Exception as e:
    add_test_result("Query Orderbook", False, None, str(e))

# Test 8: Place Limit Buy Order (Account A buys USDC with XLM) - v2 COMPOSITE CALL
print("Test 8: Placing limit buy order (Account A: Buy 10 USDC at 0.50 XLM/USDC)...")
print("   (v2 composite tool - 1 call instead of 3)")
try:
    result = trading(
        action="buy",
        order_type="limit",
        account_id=account_a,
        key_manager=keys,
        horizon=horizon,
        buying_asset="USDC",
        selling_asset="XLM",
        buying_issuer=USDC_ISSUER,
        amount="10",
        price="0.50",
        auto_sign=True
    )
    if not result.get("success"):
        add_test_result("Place Limit Buy Order", False, None, result.get("error"))
    else:
        add_test_result(
            "Place Limit Buy Order",
            True,
            f"Hash: {result['hash'][:16]}..., Ledger: {result['ledger']} [v2: 1 call vs v1: 3 calls]"
        )
except Exception as e:
    add_test_result("Place Limit Buy Order", False, None, str(e))

# Test 9: Place Limit Buy Order (Account B buys USDC with XLM) - v2 COMPOSITE CALL
print("Test 9: Placing limit buy order (Account B: Buy 200 USDC with 100 XLM at 0.5 XLM/USDC)...")
print("   (v2 composite tool - 1 call instead of 3)")
try:
    result = trading(
        action="buy",
        order_type="limit",
        account_id=account_b,
        key_manager=keys,
        horizon=horizon,
        buying_asset="USDC",
        selling_asset="XLM",
        buying_issuer=USDC_ISSUER,
        amount="200",
        price="0.5",
        auto_sign=True
    )
    if not result.get("success"):
        add_test_result("Place Limit Buy Order", False, None, result.get("error"))
    else:
        add_test_result(
            "Place Limit Buy Order",
            True,
            f"Hash: {result['hash'][:16]}..., Ledger: {result['ledger']} [v2: 1 call vs v1: 3 calls]"
        )
except Exception as e:
    add_test_result("Place Limit Buy Order", False, None, str(e))

# Test 10: Check Open Orders for Account A
print("Test 10: Checking open orders for Account A...")
try:
    result = trading(action="get_orders", account_id=account_a, key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Check Open Orders A", False, None, result["error"])
    else:
        order_count = len(result.get("offers", []))
        add_test_result("Check Open Orders A", True, f"Found {order_count} open order(s)")

        # Store first offer ID for cancellation test
        if order_count > 0:
            report["offer_id_a"] = result["offers"][0]["id"]
except Exception as e:
    add_test_result("Check Open Orders A", False, None, str(e))

# Test 11: Check Open Orders for Account B
print("Test 11: Checking open orders for Account B...")
try:
    result = trading(action="get_orders", account_id=account_b, key_manager=keys, horizon=horizon)
    if "error" in result:
        add_test_result("Check Open Orders B", False, None, result["error"])
    else:
        order_count = len(result.get("offers", []))
        add_test_result("Check Open Orders B", True, f"Found {order_count} open order(s)")

        # Store first offer ID for cancellation test
        if order_count > 0:
            report["offer_id_b"] = result["offers"][0]["id"]
except Exception as e:
    add_test_result("Check Open Orders B", False, None, str(e))

# Test 12: Cancel Order from Account A (if exists)
print("Test 12: Canceling order from Account A...")
if "offer_id_a" in report:
    try:
        result = trading(
            action="cancel_order",
            account_id=account_a,
            offer_id=str(report["offer_id_a"]),
            key_manager=keys,
            horizon=horizon,
            auto_sign=True
        )
        if not result.get("success"):
            add_test_result("Cancel Order A", False, None, result.get("error"))
        else:
            add_test_result(
                "Cancel Order A",
                True,
                f"Offer {report['offer_id_a']} cancelled, Hash: {result['hash'][:16]}..."
            )
    except Exception as e:
        add_test_result("Cancel Order A", False, None, str(e))
else:
    add_test_result("Cancel Order A", False, "No order to cancel", "No open orders found")

# Test 13: Cancel Order from Account B (if exists)
print("Test 13: Canceling order from Account B...")
if "offer_id_b" in report:
    try:
        result = trading(
            action="cancel_order",
            account_id=account_b,
            offer_id=str(report["offer_id_b"]),
            key_manager=keys,
            horizon=horizon,
            auto_sign=True
        )
        if not result.get("success"):
            add_test_result("Cancel Order B", False, None, result.get("error"))
        else:
            add_test_result(
                "Cancel Order B",
                True,
                f"Offer {report['offer_id_b']} cancelled, Hash: {result['hash'][:16]}..."
            )
    except Exception as e:
        add_test_result("Cancel Order B", False, None, str(e))
else:
    add_test_result("Cancel Order B", False, "No order to cancel", "No open orders found")

# Test 14: Verify Orders Cancelled
print("Test 14: Verifying orders cancelled...")
try:
    result_a = trading(action="get_orders", account_id=account_a, key_manager=keys, horizon=horizon)
    result_b = trading(action="get_orders", account_id=account_b, key_manager=keys, horizon=horizon)

    orders_a = len(result_a.get("offers", []))
    orders_b = len(result_b.get("offers", []))

    if orders_a == 0 and orders_b == 0:
        add_test_result("Verify Cancellation", True, "All orders successfully cancelled")
    else:
        add_test_result(
            "Verify Cancellation",
            False,
            f"Account A: {orders_a} orders, Account B: {orders_b} orders remaining",
            "Orders still exist after cancellation"
        )
except Exception as e:
    add_test_result("Verify Cancellation", False, None, str(e))

# Test 15: Execute REAL market buy - v2 COMPOSITE CALL (THE BIG IMPROVEMENT!)
print("Test 15: REAL MARKET BUY - Acquire USDC at market price...")
print("   (Using Account A, will pay market price in testnet XLM)")
print("   (v2 composite tool - 1 call vs v1 3 separate calls)")
try:
    # Query current orderbook to find best ask
    orderbook = market_data(
        action="orderbook",
        horizon=horizon,
        base_asset="XLM",
        quote_asset="USDC",
        quote_issuer=USDC_ISSUER,
        limit=10
    )

    # To BUY USDC (sell XLM), we look at bids (people buying XLM with USDC)
    if orderbook.get("bids") and len(orderbook["bids"]) > 0:
        best_bid = orderbook["bids"][0]
        bid_price = float(best_bid["price"])  # USDC/XLM
        bid_amount = float(best_bid["amount"])  # USDC available

        # Buy amount (take a small amount to ensure liquidity exists)
        buy_amount = min(bid_amount, 0.02)  # Buy 0.02 USDC or whatever is available
        # Price in XLM/USDC for display
        price_xlm_per_usdc = 1.0 / bid_price if bid_price > 0 else 0

        print(f"   Best bid: {bid_price} USDC/XLM ({price_xlm_per_usdc:.2f} XLM/USDC) for {bid_amount} USDC available")
        print(f"   Placing market buy: {buy_amount} USDC (will cost ~{buy_amount * price_xlm_per_usdc:.2f} XLM)")

        # v2 SINGLE CALL with auto-signing (vs v1: 3 separate calls)
        result = trading(
            action="buy",
            order_type="market",
            account_id=account_a,
            key_manager=keys,
            horizon=horizon,
            buying_asset="USDC",
            selling_asset="XLM",
            buying_issuer=USDC_ISSUER,
            amount=str(buy_amount),
            auto_sign=True
        )

        if not result.get("success"):
            add_test_result("Market Buy USDC", False, None, result.get("error"))
        else:
            # Wait for ledger and check balances
            import time
            time.sleep(3)

            account_details = account_manager(action="get", account_id=account_a, key_manager=keys, horizon=horizon)
            usdc_balance = None
            xlm_balance = None

            for bal in account_details["balances"]:
                if bal["asset_type"] == "native":
                    xlm_balance = bal["balance"]
                elif bal.get("asset_code") == "USDC":
                    usdc_balance = float(bal["balance"])

            if usdc_balance and usdc_balance > 0:
                add_test_result(
                    "Market Buy USDC",
                    True,
                    f"✨ REAL TRADE EXECUTED! Acquired {usdc_balance} USDC at {price_xlm_per_usdc:.2f} XLM/USDC [v2: 1 call vs v1: 3 calls]"
                )
                report["real_trade_executed"] = True
                report["usdc_acquired"] = usdc_balance
                report["trade_price"] = price_xlm_per_usdc
            else:
                add_test_result(
                    "Market Buy USDC",
                    False,
                    f"Order submitted but no USDC received. Hash: {result['hash'][:16]}...",
                    "Trade may not have filled"
                )
    else:
        add_test_result("Market Buy USDC", False, "No bids available in orderbook", "No USDC liquidity on testnet (no one buying XLM with USDC)")

except Exception as e:
    add_test_result("Market Buy USDC", False, None, str(e))

print("=" * 70)
print("TEST SUITE COMPLETE")
print("=" * 70)
print()
print(f"Results: {report['summary']['passed']}/{report['summary']['total']} tests passed")
print()

# Generate markdown report
print("Generating markdown report...")
report_file = generate_markdown_report()
print(f"✅ Report saved to: {report_file}")
print()

# Print account links
print("Test Accounts:")
print(f"  Account A: https://stellar.expert/explorer/testnet/account/{account_a}")
print(f"  Account B: https://stellar.expert/explorer/testnet/account/{account_b}")
print()

# Exit with appropriate code
exit(0 if report['summary']['failed'] == 0 else 1)
